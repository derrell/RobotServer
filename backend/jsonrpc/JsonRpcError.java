/*
 * Errors generated by the JSON-RPC server
 * 
 * Copyright (c) 2010-2011 Derrell Lipman
 * 
 * License:
 *   LGPL: http://www.gnu.org/licenses/lgpl.html
 *   EPL : http://www.eclipse.org/org/documents/epl-v10.php
*/
package jsonrpc;

import java.lang.Exception;
import java.io.Writer;
import java.io.PrintWriter;
import java.io.StringWriter;
import org.json.simple.*;

public class JsonRpcError extends Exception 
{
	/*************************************************************
	 * JSON-RPC error origins
	 *************************************************************/

	/**
     *
     */
	private static final long serialVersionUID = -1948175086391613899L;

	/**
	 * Error generated by the generic JSON-RPC server
	 */
	public static final int Origin_Server = 1;

	/**
	 * Error generated by the generic JSON-RPC server
	 */
	public static final int Origin_Application = 2;

	/**
	 * Error generated by the transport, e.g. a timeout. Never generated at the
	 * server.
	 */
	public static final int Origin_Transport = 3;

	/**
	 * Error generated at the client. Never generated at the server.
	 */
	public static final int Origin_Client = 4;

	/*
	 * JSON-RPC server-generated error codes
	 */

	/**
	 * Error code, value -1: Script Error
	 * 
	 * This error is raised when the service class aborts with an error, either
	 * syntax (parsing) errors or runtime exceptions.
	 */
	public static final int Error_ScriptError = -1;

	/**
	 * Error code, value 0: Unknown Error
	 * 
	 * The default error code, used only when no specific error code is passed
	 * to the JsonRpcError constructor. This code should generally not be used.
	 */
	public static final int Error_Unknown = 0;

	/**
	 * Error code, value 1: Illegal Service
	 * 
	 * The service name contains illegal characters or is otherwise deemed
	 * unacceptable to the JSON-RPC server.
	 */
	public static final int Error_IllegalService = 1;

	/**
	 * Error code, value 2: Service Not Found
	 * 
	 * The requested service does not exist at the JSON-RPC server.
	 */
	public static final int Error_ServiceNotFounc = 2;

	/**
	 * Error code, value 3: Class Not Found
	 * 
	 * If the JSON-RPC server divides service methods into subsets (classes),
	 * this indicates that the specified class was not found. This is slightly
	 * more detailed than "Method Not Found", but that error would always also
	 * be legal (and true) whenever this one is returned.
	 */
	public static final int Error_ClassNotFound = 3;

	/**
	 * Error code, value 4: Method Not Found
	 * 
	 * The method specified in the request is not found in the requested
	 * service.
	 */
	public static final int Error_MethodNotFound = 4;

	/**
	 * Error code, value 5: Parameter Mismatch
	 * 
	 * If a method discovers that the parameters (arguments) provided to it do
	 * not match the requisite types for the method's parameters, it should
	 * return this error code to indicate so to the caller.
	 */
	public static final int Error_ParameterMismatch = 5;

	/**
	 * Error code, value 6: Permission Denied
	 * 
	 * A JSON-RPC service provider can require authentication, and that
	 * authentication can be implemented such the method takes authentication
	 * parameters, or such that a method or class of methods requires prior
	 * authentication. If the caller has not properly authenticated to use the
	 * requested method, this error code is returned.
	 */
	public static final int Error_PermissionDenied = 6;

	/** The identifier associated with this error */
	private long id;

	/** The current error code */
	private long code = Error_Unknown;

	/** The current error origin */
	private long origin = Origin_Application;

	/** The current error message */
	private String message = "Unspecified error";

	/**
	 * Default Constructor
	 */
	public JsonRpcError() {
	}

	/**
	 * Constructor with initialization parameters
	 * 
	 * @param code
	 *            The error code
	 * 
	 * @param message
	 *            The associated error message
	 */
	public JsonRpcError(long code, String message) {
		this.code = code;
		this.message = message + JsonRpcError.getStackTrace(this);
	}

	public JsonRpcError(long code, String message, Throwable e) {
		this.code = code;
		this.message = message + JsonRpcError.getStackTrace(e);
	}

	/**
	 * Set the error origin
	 * 
	 * @param origin
	 *            The origin of the error, i.e. one of Origin_*
	 */
	public void setOrigin(long origin) {
		this.origin = origin;
	}

	/**
	 * Set the error code and message
	 * 
	 * @param code
	 *            The error code to be set
	 * 
	 * @param message
	 *            The message associated with this error
	 */
	public void setError(int code, String message) {
		this.code = code;
		this.message = message;
	}

	/**
	 * Set the request id
	 * 
	 * @param id
	 *            The id of the JSON-RPC request
	 */
	public void setId(long id) {
		this.id = id;
	}

	/**
	 * Get a string version of the stack trace This came from
	 * http://www.javapractices.com/topic/TopicAction.do?Id=78
	 * 
	 * @param e
	 * 
	 * @return
	 */
	public static String getStackTrace(Throwable e) {
		final Writer result = new StringWriter();
		final PrintWriter printWriter = new PrintWriter(result);
		e.printStackTrace(printWriter);
		return "\nStack Trace:\n" + result.toString();
	}

	/**
	 * Encode the current error as JSON
	 */
	@Override
	@SuppressWarnings("unchecked")
	public String toString() {
		// Create a JSONObject containing the error data
		JSONObject data = new JSONObject();
		data.put("origin", this.origin);
		data.put("code", this.code);
		data.put("message", this.message);

		// Create a top-level return JSONObject
		JSONObject ret = new JSONObject();
		ret.put("error", data);
		ret.put("id", this.id);

		// Encode this object and return the string
		return ret.toString();
	}
}
